name: Echo 4 Prod Workflow (Docker)

on:
  push:
    branches: [ main ]

# Docker env set up.
env:
  IMAGE_NAME: echo4-bot                 # Live image Tag
  IMAGE_BACKUP_TAG: echo4-bot-backup    # Tag for rollback
  CONTAINER_NAME: echo4-prod-container
  POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
  POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
  POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}

jobs:
  deploy:
    runs-on: self-hosted

    steps:
      # 1: Fetch updated code.
      - name: Check out repository code ‚úÖ
        uses: actions/checkout@v4

      # 2: Docker Env supplement for the Echo 4's usage.
      - name: Create .env file üìÑ
        run: |
          echo DISCORD_TOKEN="${{ secrets.DISCORD_TOKEN }}" > .env
          echo ADMIN_SERVER_ID="${{ secrets.ADMIN_SERVER_ID }}" >> .env
          echo OWNER_ID="${{ secrets.OWNER_ID }}" >> .env

      # 3: Create Back up
      - name: Tag existing image as backup üè∑Ô∏è
        run: |
          if docker inspect --type=image $IMAGE_NAME >/dev/null 2>&1; then
            echo "Backing up current image $IMAGE_NAME to $IMAGE_BACKUP_TAG..."
            docker rmi $IMAGE_BACKUP_TAG || true # Remove old backup
            docker tag $IMAGE_NAME $IMAGE_BACKUP_TAG
          else
            echo "No existing $IMAGE_NAME image found. This is likely the first deployment."
          fi
          
      # 4. Clean out old containers üîÑ
      - name: Stop old containers üöÄ
        run: |          
          echo "Stopping and removing old bot container..."
          docker stop $CONTAINER_NAME || true
          docker rm $CONTAINER_NAME || true

          echo "Stopping and removing old DB container..."
          docker stop discord-bot-db || true
          docker rm discord-bot-db || true      

      # 4. Build the Docker Image üèóÔ∏è
      # This overwrites the $IMAGE_NAME tag, pointing it to the new build
      # - name: Build Docker image üß±
      #   run: |
      #     docker build -t $IMAGE_NAME .
     
      # 5: New Docker Compose handling to maintain Database container being introduced.
      - name: Deploy Docker Compose Stack (Bot + DB) üöÄ
        run: |
          echo "Deploying new Docker Compose stack..."
          # The 'up' command with '-d' and '--build' handles stopping/removing the old containers
          # and recreating them, as defined in your docker-compose.yml.
          docker compose up -d --build
          
          echo "Deployment complete. Monitoring for health..."

      # 6: Health check and rollback logic
      - name: Health check and potential rollback ü©∫
        run: |
          echo "Waiting 30 seconds for container to boot..."
          sleep 30

          echo "Checking logs for failure..."
          # Get logs from the container. 2>&1 captures both stdout and stderr
          LOGS=$(docker logs $CONTAINER_NAME 2>&1)

          # Check for the failure string. -q is for quiet mode.
          if echo "$LOGS" | grep -q "‚ùå Failed to load cog"; then
            # ----- FAILURE CASE -----
            echo "üî¥ Failure detected: 'Failed to load cog' found in logs."
            echo "Initiating rollback..."

            # 1. Stop and remove the new, failed container
            echo "Stopping and removing failed container: $CONTAINER_NAME"
            docker stop $CONTAINER_NAME && docker rm $CONTAINER_NAME

            # 2. Remove the new, failed image
            echo "Removing failed image: $IMAGE_NAME"
            docker rmi $IMAGE_NAME

            # 3. Relaunch the old image (if backup exists)
            if docker inspect --type=image $IMAGE_BACKUP_TAG >/dev/null 2>&1; then
              echo "Relaunching backup image: $IMAGE_BACKUP_TAG"
              docker run -d \
                --name $CONTAINER_NAME \
                --restart=always \
                --env-file .env \
                $IMAGE_BACKUP_TAG
              
              # 4. Restore the main tag to the backup version for the *next* run
              echo "Restoring $IMAGE_NAME tag to backup version."
              docker tag $IMAGE_BACKUP_TAG $IMAGE_NAME
            else
              echo "‚ö†Ô∏è No backup image ($IMAGE_BACKUP_TAG) found to roll back to. System is left in a stopped state."
            fi
            
            # 5. Fail the workflow
            echo "Rollback complete. Failing workflow."
            exit 1
            
          else
            # ----- SUCCESS CASE -----
            echo "‚úÖ Health check passed. No cog failures detected."
            
            # 6. Clean up the old backup image
            echo "Cleaning up old backup image: $IMAGE_BACKUP_TAG"
            docker rmi $IMAGE_BACKUP_TAG || true
            echo "Deployment successful."
          fi